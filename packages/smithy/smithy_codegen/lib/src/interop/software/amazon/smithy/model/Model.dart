// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "loader/ModelAssembler.dart" as modelassembler_;

import "node/Node.dart" as node_;

import "shapes/ServiceShape.dart" as serviceshape_;
import "../../../../_init.dart";

/// from: software.amazon.smithy.model.Model
///
/// A Smithy model that contains shapes, traits, metadata, and various
/// computed information used to interpret the model.
class Model extends jni.JObject {
  @override
  late final jni.JObjType<Model> $type = type;

  Model.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ModelType();

  /// from: static public final java.lang.String MODEL_VERSION
  ///
  /// Specifies the highest supported version of the IDL.
  static const MODEL_VERSION = r"""2.0""";

  static final _builder =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Model__builder")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.Model.Builder builder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Builds an explicitly configured Smithy model.
  ///
  /// Note that the builder does not validate the correctness of the
  /// model. Use the \#assembler() method to build _and_
  /// validate a model.
  ///@return Returns a model builder.
  ///@see \#assembler()
  static Model_Builder builder() {
    return const $Model_BuilderType().fromRef(_builder().object);
  }

  static final _assembler =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Model__assembler")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.loader.ModelAssembler assembler()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Assembles and validates a Smithy model from files, nodes, and other
  /// disparate sources.
  ///@return Returns a model assembler.
  static modelassembler_.ModelAssembler assembler() {
    return const modelassembler_.$ModelAssemblerType()
        .fromRef(_assembler().object);
  }

  static final _assembler1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__assembler1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.loader.ModelAssembler assembler(java.lang.ClassLoader classLoader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a ModelAssembler that is configured to discover traits,
  /// validators, and built-in validators using the given
  /// {@code ClassLoader}.
  ///@param classLoader Class loader used to discover services.
  ///@return Returns a model assembler.
  static modelassembler_.ModelAssembler assembler1(
    jni.JObject classLoader,
  ) {
    return const modelassembler_.$ModelAssemblerType()
        .fromRef(_assembler1(classLoader.reference).object);
  }

  static final _getMetadataProperty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getMetadataProperty")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.node.Node> getMetadataProperty(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a metadata property by namespace and name.
  ///@param name Name of the property to retrieve.
  ///@return Returns the optional property.
  jni.JObject getMetadataProperty(
    jni.JString name,
  ) {
    return const jni.JObjectType()
        .fromRef(_getMetadataProperty(reference, name.reference).object);
  }

  static final _getMetadata = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getMetadata")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Map<java.lang.String,software.amazon.smithy.model.node.Node> getMetadata()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return Gets the unmodifiable metadata of the model across all
  ///  namespaces.
  jni.JMap<jni.JString, node_.Node> getMetadata() {
    return const jni.JMapType(jni.JStringType(), node_.$NodeType())
        .fromRef(_getMetadata(reference).object);
  }

  static final _getTraitDefinition = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getTraitDefinition")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.traits.TraitDefinition> getTraitDefinition(software.amazon.smithy.model.shapes.ToShapeId traitId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the trait definition of a specific trait shape ID.
  ///@param traitId ID of the shape to get the trait definition of.
  ///@return Returns the optionally found trait definition.
  jni.JObject getTraitDefinition(
    jni.JObject traitId,
  ) {
    return const jni.JObjectType()
        .fromRef(_getTraitDefinition(reference, traitId.reference).object);
  }

  static final _getShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.Shape> getShapesWithTrait(software.amazon.smithy.model.shapes.ToShapeId trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a set of shapes in the model marked with a specific trait.
  ///@param trait Trait shape ID to look for on shapes.
  ///@return Returns the immutable set of matching shapes.
  jni.JSet<jni.JObject> getShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getShapesWithTrait(reference, trait.reference).object);
  }

  static final _getShapeIds = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getShapeIds")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ShapeId> getShapeIds()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the immutable set of {@code ShapeId} in the model.
  ///@return Returns the shape IDs.
  jni.JSet<jni.JObject> getShapeIds() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getShapeIds(reference).object);
  }

  static final _getShapesWithTrait1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getShapesWithTrait1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.Shape> getShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a set of shapes in the model marked with a specific trait.
  ///
  /// The result is an exact match on trait classes and does not utilize
  /// any kind of polymorphic instance of checks.
  ///@param trait Trait class to look for on shapes.
  ///@return Returns the immutable set of matching shapes.
  jni.JSet<jni.JObject> getShapesWithTrait1(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getShapesWithTrait1(reference, trait.reference).object);
  }

  static final _getBigDecimalShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getBigDecimalShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BigDecimalShape> getBigDecimalShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all bigDecimals in the Model.
  ///@return Returns the Set of {@code bigDecimals}s.
  jni.JSet<jni.JObject> getBigDecimalShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getBigDecimalShapes(reference).object);
  }

  static final _getBigDecimalShapesWithTrait = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Model__getBigDecimalShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BigDecimalShape> getBigDecimalShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all bigDecimals in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code bigdecimal}s that have a specific trait.
  jni.JSet<jni.JObject> getBigDecimalShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType()).fromRef(
        _getBigDecimalShapesWithTrait(reference, trait.reference).object);
  }

  static final _getBigIntegerShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getBigIntegerShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BigIntegerShape> getBigIntegerShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all bigIntegers in the Model.
  ///@return Returns the Set of {@code bigIntegers}s.
  jni.JSet<jni.JObject> getBigIntegerShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getBigIntegerShapes(reference).object);
  }

  static final _getBigIntegerShapesWithTrait = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Model__getBigIntegerShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BigIntegerShape> getBigIntegerShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all bigIntegers in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code bigIntegers}s that have a specific trait.
  jni.JSet<jni.JObject> getBigIntegerShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType()).fromRef(
        _getBigIntegerShapesWithTrait(reference, trait.reference).object);
  }

  static final _getBlobShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getBlobShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BlobShape> getBlobShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all blobs in the Model.
  ///@return Returns the Set of {@code blob}s.
  jni.JSet<jni.JObject> getBlobShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getBlobShapes(reference).object);
  }

  static final _getBlobShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getBlobShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BlobShape> getBlobShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all blobs in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code blob}s that have a specific trait.
  jni.JSet<jni.JObject> getBlobShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getBlobShapesWithTrait(reference, trait.reference).object);
  }

  static final _getBooleanShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getBooleanShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BooleanShape> getBooleanShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all booleans in the Model.
  ///@return Returns the Set of {@code boolean}s.
  jni.JSet<jni.JObject> getBooleanShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getBooleanShapes(reference).object);
  }

  static final _getBooleanShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getBooleanShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.BooleanShape> getBooleanShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all booleans in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code boolean}s that have a specific trait.
  jni.JSet<jni.JObject> getBooleanShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getBooleanShapesWithTrait(reference, trait.reference).object);
  }

  static final _getByteShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getByteShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ByteShape> getByteShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all bytes in the Model.
  ///@return Returns the Set of {@code byte}s.
  jni.JSet<jni.JObject> getByteShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getByteShapes(reference).object);
  }

  static final _getByteShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getByteShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ByteShape> getByteShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all bytes in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code byte}s that have a specific trait.
  jni.JSet<jni.JObject> getByteShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getByteShapesWithTrait(reference, trait.reference).object);
  }

  static final _getDocumentShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getDocumentShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.DocumentShape> getDocumentShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all documents in the Model.
  ///@return Returns the Set of {@code document}s.
  jni.JSet<jni.JObject> getDocumentShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getDocumentShapes(reference).object);
  }

  static final _getDocumentShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getDocumentShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.DocumentShape> getDocumentShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all documents in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code document}s that have a specific trait.
  jni.JSet<jni.JObject> getDocumentShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType()).fromRef(
        _getDocumentShapesWithTrait(reference, trait.reference).object);
  }

  static final _getDoubleShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getDoubleShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.DoubleShape> getDoubleShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all doubles in the Model.
  ///@return Returns the Set of {@code double}s.
  jni.JSet<jni.JObject> getDoubleShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getDoubleShapes(reference).object);
  }

  static final _getDoubleShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getDoubleShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.DoubleShape> getDoubleShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all doubles in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code double}s that have a specific trait.
  jni.JSet<jni.JObject> getDoubleShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getDoubleShapesWithTrait(reference, trait.reference).object);
  }

  static final _getFloatShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getFloatShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.FloatShape> getFloatShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all floats in the Model.
  ///@return Returns the Set of {@code float}s.
  jni.JSet<jni.JObject> getFloatShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getFloatShapes(reference).object);
  }

  static final _getFloatShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getFloatShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.FloatShape> getFloatShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all floats in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code float}s that have a specific trait.
  jni.JSet<jni.JObject> getFloatShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getFloatShapesWithTrait(reference, trait.reference).object);
  }

  static final _getIntegerShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getIntegerShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.IntegerShape> getIntegerShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all integers in the Model.
  ///@return Returns the Set of {@code integer}s.
  jni.JSet<jni.JObject> getIntegerShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getIntegerShapes(reference).object);
  }

  static final _getIntegerShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getIntegerShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.IntegerShape> getIntegerShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all integers in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code integer}s that have a specific trait.
  jni.JSet<jni.JObject> getIntegerShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getIntegerShapesWithTrait(reference, trait.reference).object);
  }

  static final _getIntEnumShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getIntEnumShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.IntEnumShape> getIntEnumShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all intEnums in the Model.
  ///@return Returns the Set of {@code intEnum}s.
  jni.JSet<jni.JObject> getIntEnumShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getIntEnumShapes(reference).object);
  }

  static final _getIntEnumShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getIntEnumShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.IntEnumShape> getIntEnumShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all intEnums in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code intEnum}s that have a specific trait.
  jni.JSet<jni.JObject> getIntEnumShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getIntEnumShapesWithTrait(reference, trait.reference).object);
  }

  static final _getListShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getListShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ListShape> getListShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all lists in the Model.
  ///@return Returns the Set of {@code list}s.
  jni.JSet<jni.JObject> getListShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getListShapes(reference).object);
  }

  static final _getListShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getListShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ListShape> getListShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all lists in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code list}s that have a specific trait.
  jni.JSet<jni.JObject> getListShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getListShapesWithTrait(reference, trait.reference).object);
  }

  static final _getLongShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getLongShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.LongShape> getLongShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all longs in the Model.
  ///@return Returns the Set of {@code long}s.
  jni.JSet<jni.JObject> getLongShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getLongShapes(reference).object);
  }

  static final _getLongShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getLongShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.LongShape> getLongShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all longs in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code long}s that have a specific trait.
  jni.JSet<jni.JObject> getLongShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getLongShapesWithTrait(reference, trait.reference).object);
  }

  static final _getMapShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getMapShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.MapShape> getMapShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all maps in the Model.
  ///@return Returns the Set of {@code map}s.
  jni.JSet<jni.JObject> getMapShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getMapShapes(reference).object);
  }

  static final _getMapShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getMapShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.MapShape> getMapShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all maps in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code map}s that have a specific trait.
  jni.JSet<jni.JObject> getMapShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getMapShapesWithTrait(reference, trait.reference).object);
  }

  static final _getMemberShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getMemberShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.MemberShape> getMemberShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all members in the Model.
  ///@return Returns the Set of {@code member}s.
  jni.JSet<jni.JObject> getMemberShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getMemberShapes(reference).object);
  }

  static final _getMemberShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getMemberShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.MemberShape> getMemberShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all members in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code member}s that have a specific trait.
  jni.JSet<jni.JObject> getMemberShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getMemberShapesWithTrait(reference, trait.reference).object);
  }

  static final _getOperationShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getOperationShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.OperationShape> getOperationShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all operations in the Model.
  ///@return Returns the Set of {@code operation}s.
  jni.JSet<jni.JObject> getOperationShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getOperationShapes(reference).object);
  }

  static final _getOperationShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getOperationShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.OperationShape> getOperationShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all operations in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code operation}s that have a specific trait.
  jni.JSet<jni.JObject> getOperationShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType()).fromRef(
        _getOperationShapesWithTrait(reference, trait.reference).object);
  }

  static final _getResourceShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getResourceShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ResourceShape> getResourceShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all resources in the Model.
  ///@return Returns the Set of {@code resource}s.
  jni.JSet<jni.JObject> getResourceShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getResourceShapes(reference).object);
  }

  static final _getResourceShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getResourceShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ResourceShape> getResourceShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all resources in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code resource}s that have a specific trait.
  jni.JSet<jni.JObject> getResourceShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType()).fromRef(
        _getResourceShapesWithTrait(reference, trait.reference).object);
  }

  static final _getServiceShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getServiceShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ServiceShape> getServiceShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all services in the Model.
  ///@return Returns the Set of {@code service}s.
  jni.JSet<serviceshape_.ServiceShape> getServiceShapes() {
    return const jni.JSetType(serviceshape_.$ServiceShapeType())
        .fromRef(_getServiceShapes(reference).object);
  }

  static final _getServiceShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getServiceShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ServiceShape> getServiceShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all services in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code service}s that have a specific trait.
  jni.JSet<serviceshape_.ServiceShape> getServiceShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(serviceshape_.$ServiceShapeType())
        .fromRef(_getServiceShapesWithTrait(reference, trait.reference).object);
  }

  static final _getSetShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getSetShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.SetShape> getSetShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all sets in the Model.
  ///@return Returns the Set of {@code set}s.
  jni.JSet<jni.JObject> getSetShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getSetShapes(reference).object);
  }

  static final _getSetShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getSetShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.SetShape> getSetShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all sets in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code set}s that have a specific trait.
  jni.JSet<jni.JObject> getSetShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getSetShapesWithTrait(reference, trait.reference).object);
  }

  static final _getShortShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getShortShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ShortShape> getShortShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all shorts in the Model.
  ///@return Returns the Set of {@code short}s.
  jni.JSet<jni.JObject> getShortShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getShortShapes(reference).object);
  }

  static final _getShortShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getShortShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ShortShape> getShortShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all shorts in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code short}s that have a specific trait.
  jni.JSet<jni.JObject> getShortShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getShortShapesWithTrait(reference, trait.reference).object);
  }

  static final _getStringShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getStringShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.StringShape> getStringShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all strings in the Model.
  ///@return Returns the Set of {@code string}s.
  jni.JSet<jni.JObject> getStringShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getStringShapes(reference).object);
  }

  static final _getStringShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getStringShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.StringShape> getStringShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all strings in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code string}s that have a specific trait.
  jni.JSet<jni.JObject> getStringShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getStringShapesWithTrait(reference, trait.reference).object);
  }

  static final _getEnumShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getEnumShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.EnumShape> getEnumShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all enums in the Model.
  ///@return Returns the Set of {@code enum}s.
  jni.JSet<jni.JObject> getEnumShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getEnumShapes(reference).object);
  }

  static final _getEnumShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getEnumShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.EnumShape> getEnumShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all enums in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code enum}s that have a specific trait.
  jni.JSet<jni.JObject> getEnumShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getEnumShapesWithTrait(reference, trait.reference).object);
  }

  static final _getStructureShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getStructureShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.StructureShape> getStructureShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all structures in the Model.
  ///@return Returns the Set of {@code structure}s.
  jni.JSet<jni.JObject> getStructureShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getStructureShapes(reference).object);
  }

  static final _getStructureShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getStructureShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.StructureShape> getStructureShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all structures in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code structure}s that have a specific trait.
  jni.JSet<jni.JObject> getStructureShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType()).fromRef(
        _getStructureShapesWithTrait(reference, trait.reference).object);
  }

  static final _getTimestampShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getTimestampShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.TimestampShape> getTimestampShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all timestamps in the Model.
  ///@return Returns the Set of {@code timestamp}s.
  jni.JSet<jni.JObject> getTimestampShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getTimestampShapes(reference).object);
  }

  static final _getTimestampShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getTimestampShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.TimestampShape> getTimestampShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all timestamps in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code timestamp}s that have a specific trait.
  jni.JSet<jni.JObject> getTimestampShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType()).fromRef(
        _getTimestampShapesWithTrait(reference, trait.reference).object);
  }

  static final _getUnionShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getUnionShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.UnionShape> getUnionShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all unions in the Model.
  ///@return Returns the Set of {@code union}s.
  jni.JSet<jni.JObject> getUnionShapes() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getUnionShapes(reference).object);
  }

  static final _getUnionShapesWithTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getUnionShapesWithTrait")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.UnionShape> getUnionShapesWithTrait(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable set of all unions in the Model that have a specific trait.
  ///@param trait The exact trait class to look for on shapes.
  ///@return Returns the set of {@code union}s that have a specific trait.
  jni.JSet<jni.JObject> getUnionShapesWithTrait(
    jni.JObject trait,
  ) {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getUnionShapesWithTrait(reference, trait.reference).object);
  }

  static final _getAppliedTraits = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__getAppliedTraits")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.ShapeId> getAppliedTraits()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a set of every trait shape ID that is used in the model.
  ///@return Returns the shape IDs of traits used in the model.
  jni.JSet<jni.JObject> getAppliedTraits() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_getAppliedTraits(reference).object);
  }

  static final _isTraitApplied = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__isTraitApplied")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isTraitApplied(java.lang.Class<? extends software.amazon.smithy.model.traits.Trait> trait)
  ///
  /// Returns true if the given trait shape ID was used in the model.
  ///@param trait The trait class to check.
  ///@return Returns true if the trait was used in the model.
  bool isTraitApplied(
    jni.JObject trait,
  ) {
    return _isTraitApplied(reference, trait.reference).boolean;
  }

  static final _getShape = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getShape")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.shapes.Shape> getShape(software.amazon.smithy.model.shapes.ShapeId id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to retrieve a Shape by ShapeId.
  ///@param id Shape to retrieve by ID.
  ///@return Returns the optional shape.
  jni.JObject getShape(
    jni.JObject id,
  ) {
    return const jni.JObjectType()
        .fromRef(_getShape(reference, id.reference).object);
  }

  static final _expectShape = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__expectShape")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.Shape expectShape(software.amazon.smithy.model.shapes.ShapeId id)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to retrieve a Shape by ShapeId and
  /// throws if not found.
  ///@param id Shape to retrieve by ID.
  ///@return Returns the shape.
  ///@throws ExpectationNotMetException if the shape is not found.
  jni.JObject expectShape(
    jni.JObject id,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectShape(reference, id.reference).object);
  }

  static final _expectShape1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__expectShape1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public T expectShape(software.amazon.smithy.model.shapes.ShapeId id, java.lang.Class<T> type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to retrieve a Shape by ShapeId and
  /// throws if not found or if the shape is not of the expected type.
  ///@param id Shape to retrieve by ID.
  ///@param type Shape type to expect and convert to.
  ///@param <T> Expected shape type.
  ///@return Returns the shape.
  ///@throws ExpectationNotMetException if the shape is not found or is not the expected type.
  $T expectShape1<$T extends jni.JObject>(
    jni.JObject id,
    jni.JObject type, {
    required jni.JObjType<$T> T,
  }) {
    return T
        .fromRef(_expectShape1(reference, id.reference, type.reference).object);
  }

  static final _shapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__shapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.stream.Stream<software.amazon.smithy.model.shapes.Shape> shapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a stream of Shapes in the index.
  ///@return Returns a stream of shapes.
  jni.JObject shapes() {
    return const jni.JObjectType().fromRef(_shapes(reference).object);
  }

  static final _shapes1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__shapes1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.stream.Stream<T> shapes(java.lang.Class<T> shapeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a stream of shapes in the index of a specific type {@code T}.
  ///
  /// The provided shapeType class must exactly match the class of a
  /// shape in the model in order to be returned from this method;
  /// that is, the provided class must be a concrete subclass of
  /// Shape and not an abstract class like NumberShape.
  ///@param shapeType Shape type {@code T} to retrieve.
  ///@param <T> Shape type to stream from the index.
  ///@return A stream of shapes of {@code T} matching {@code shapeType}.
  jni.JObject shapes1<$T extends jni.JObject>(
    jni.JObject shapeType, {
    required jni.JObjType<$T> T,
  }) {
    return const jni.JObjectType()
        .fromRef(_shapes1(reference, shapeType.reference).object);
  }

  static final _toSet = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__toSet")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<T> toSet(java.lang.Class<T> shapeType)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable Set of shapes of a specific type.
  ///@param shapeType Type of shape to get a set of.
  ///@param <T> Shape type to get from the index.
  ///@return Returns an unmodifiable set of shapes.
  jni.JSet<$T> toSet<$T extends jni.JObject>(
    jni.JObject shapeType, {
    required jni.JObjType<$T> T,
  }) {
    return jni.JSetType(T)
        .fromRef(_toSet(reference, shapeType.reference).object);
  }

  static final _toSet1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__toSet1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Set<software.amazon.smithy.model.shapes.Shape> toSet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Converts the model to an immutable Set of shapes.
  ///@return Returns an unmodifiable set of shapes.
  jni.JSet<jni.JObject> toSet1() {
    return const jni.JSetType(jni.JObjectType())
        .fromRef(_toSet1(reference).object);
  }

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(
    jni.JObject other,
  ) {
    return _equals1(reference, other.reference).boolean;
  }

  static final _hashCode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__hashCode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference).integer;
  }

  static final _toBuilder = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model__toBuilder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder toBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Model_Builder toBuilder() {
    return const $Model_BuilderType().fromRef(_toBuilder(reference).object);
  }

  static final _getKnowledge = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getKnowledge")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T getKnowledge(java.lang.Class<T> type)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// This method is deprecated. Use the {@code of} method of the
  /// KnowledgeIndex you wish to create instead.
  ///@param type Type of knowledge index to retrieve.
  ///@param <T> The type of knowledge index to retrieve.
  ///@return Returns the computed knowledge index.
  $T getKnowledge<$T extends jni.JObject>(
    jni.JObject type, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(_getKnowledge(reference, type.reference).object);
  }

  static final _getKnowledge1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model__getKnowledge1")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public T getKnowledge(java.lang.Class<T> type, java.util.function.Function<software.amazon.smithy.model.Model,T> constructor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a computed "knowledge index" of a specific type for the model
  /// and caches it for subsequent retrieval.
  ///
  /// This method should not typically be called directly because
  /// KnowledgeIndex classes should all provide a public static {@code of}
  /// method that accepts a {@code Model} and returns an instance of the
  /// index by invoking {@code getKnowledge}.
  ///
  /// If a KnowledgeIndex of the given type has not yet been
  /// computed, one will be created using the provided {@code constructor}
  /// function that accepts a Model. Computed knowledge indexes are
  /// cached and returned on subsequent retrievals.
  ///@param type Type of knowledge index to retrieve.
  ///@param constructor The method used to create {@code type}.
  ///@param <T> The type of knowledge index to retrieve.
  ///@return Returns the computed knowledge index.
  $T getKnowledge1<$T extends jni.JObject>(
    jni.JObject type,
    jni.JObject constructor, {
    required jni.JObjType<$T> T,
  }) {
    return T.fromRef(
        _getKnowledge1(reference, type.reference, constructor.reference)
            .object);
  }
}

class $ModelType extends jni.JObjType<Model> {
  const $ModelType();

  @override
  String get signature => r"Lsoftware/amazon/smithy/model/Model;";

  @override
  Model fromRef(jni.JObjectPtr ref) => Model.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ModelType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ModelType) && other is $ModelType;
  }
}

/// from: software.amazon.smithy.model.Model$Builder
///
/// Builder used to create a Model.
class Model_Builder extends jni.JObject {
  @override
  late final jni.JObjType<Model_Builder> $type = type;

  Model_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Model_BuilderType();
  static final _metadata = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model_Builder__metadata")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder metadata(java.util.Map<java.lang.String,software.amazon.smithy.model.node.Node> metadata)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Model_Builder metadata(
    jni.JMap<jni.JString, node_.Node> metadata,
  ) {
    return const $Model_BuilderType()
        .fromRef(_metadata(reference, metadata.reference).object);
  }

  static final _putMetadataProperty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model_Builder__putMetadataProperty")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder putMetadataProperty(java.lang.String key, software.amazon.smithy.model.node.Node value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Model_Builder putMetadataProperty(
    jni.JString key,
    node_.Node value,
  ) {
    return const $Model_BuilderType().fromRef(
        _putMetadataProperty(reference, key.reference, value.reference).object);
  }

  static final _removeMetadataProperty = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "Model_Builder__removeMetadataProperty")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder removeMetadataProperty(java.lang.String key)
  /// The returned object must be deleted after use, by calling the `delete` method.
  Model_Builder removeMetadataProperty(
    jni.JString key,
  ) {
    return const $Model_BuilderType()
        .fromRef(_removeMetadataProperty(reference, key.reference).object);
  }

  static final _clearMetadata = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model_Builder__clearMetadata")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder clearMetadata()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Model_Builder clearMetadata() {
    return const $Model_BuilderType().fromRef(_clearMetadata(reference).object);
  }

  static final _addShape = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model_Builder__addShape")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder addShape(software.amazon.smithy.model.shapes.Shape shape)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Add a shape to the builder.
  ///
  /// MemberShape shapes are not added to the model directly.
  /// They must be added by adding their containing shapes (e.g., to add a
  /// list member, you must add the list shape that contains it). Any member
  /// shape provided to any of the methods used to add shapes to the
  /// model are ignored.
  ///@param shape Shape to add.
  ///@return Returns the builder.
  Model_Builder addShape(
    jni.JObject shape,
  ) {
    return const $Model_BuilderType()
        .fromRef(_addShape(reference, shape.reference).object);
  }

  static final _addShapes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model_Builder__addShapes")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder addShapes(software.amazon.smithy.model.Model model)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds the shapes of another model to the builder.
  ///@param model Model to add shapes from.
  ///@return Returns the builder.
  Model_Builder addShapes(
    Model model,
  ) {
    return const $Model_BuilderType()
        .fromRef(_addShapes(reference, model.reference).object);
  }

  static final _addShapes1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model_Builder__addShapes1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder addShapes(java.util.Collection<S> shapes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a collection of shapes to the builder.
  ///@param shapes Collection of Shapes to add.
  ///@param <S> Type of shape being added.
  ///@return Returns the builder.
  Model_Builder addShapes1<$S extends jni.JObject>(
    jni.JObject shapes, {
    required jni.JObjType<$S> S,
  }) {
    return const $Model_BuilderType()
        .fromRef(_addShapes1(reference, shapes.reference).object);
  }

  static final _addShapes2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model_Builder__addShapes2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder addShapes(software.amazon.smithy.model.shapes.Shape[] shapes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a variadic list of shapes.
  ///@param shapes Shapes to add.
  ///@return Returns the builder.
  Model_Builder addShapes2(
    jni.JArray<jni.JObject> shapes,
  ) {
    return const $Model_BuilderType()
        .fromRef(_addShapes2(reference, shapes.reference).object);
  }

  static final _removeShape = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Model_Builder__removeShape")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model.Builder removeShape(software.amazon.smithy.model.shapes.ShapeId shapeId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes a shape from the builder by ID.
  ///
  /// Members of shapes are automatically removed when their
  /// containing shape is removed.
  ///@param shapeId Shape to remove.
  ///@return Returns the builder.
  Model_Builder removeShape(
    jni.JObject shapeId,
  ) {
    return const $Model_BuilderType()
        .fromRef(_removeShape(reference, shapeId.reference).object);
  }

  static final _getCurrentShapes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model_Builder__getCurrentShapes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Map<software.amazon.smithy.model.shapes.ShapeId,software.amazon.smithy.model.shapes.Shape> getCurrentShapes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets an immutable view of the current shapes in the builder.
  ///
  /// The returned view may not be updated as shapes are added to the builder.
  ///@return Returns the current shapes in the builder.
  jni.JMap<jni.JObject, jni.JObject> getCurrentShapes() {
    return const jni.JMapType(jni.JObjectType(), jni.JObjectType())
        .fromRef(_getCurrentShapes(reference).object);
  }

  static final _build = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Model_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.Model build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Model build() {
    return const $ModelType().fromRef(_build(reference).object);
  }
}

class $Model_BuilderType extends jni.JObjType<Model_Builder> {
  const $Model_BuilderType();

  @override
  String get signature => r"Lsoftware/amazon/smithy/model/Model$Builder;";

  @override
  Model_Builder fromRef(jni.JObjectPtr ref) => Model_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Model_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Model_BuilderType) &&
        other is $Model_BuilderType;
  }
}
