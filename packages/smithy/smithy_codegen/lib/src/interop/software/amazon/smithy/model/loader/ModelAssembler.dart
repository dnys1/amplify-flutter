// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../node/Node.dart" as node_;

import "../Model.dart" as model_;

import "../validation/ValidatedResult.dart" as validatedresult_;
import "../../../../../_init.dart";

/// from: software.amazon.smithy.model.loader.ModelAssembler
///
/// Assembles and validates a Model from documents, files, shapes, and
/// other sources.
///
/// Validation vents are aggregated into a Set to ensure that
/// duplicate events are not emitted.
///
/// Smithy models found on the class path can be discovered using
/// _model discovery_. Model discovery must be explicitly requested of
/// a {@code ModelAssembler} by invoking \#discoverModels() or
/// \#discoverModels(ClassLoader).
///@see Model\#assembler()
class ModelAssembler extends jni.JObject {
  @override
  late final jni.JObjType<ModelAssembler> $type = type;

  ModelAssembler.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ModelAssemblerType();

  /// from: static public final java.lang.String ALLOW_UNKNOWN_TRAITS
  ///
  /// Allow unknown traits rather than fail.
  static const ALLOW_UNKNOWN_TRAITS = r"""assembler.allowUnknownTraits""";

  /// from: static public final java.lang.String DISABLE_JAR_CACHE
  ///
  /// Sets URLConnection\#setUseCaches to false.
  ///
  /// When running in a build environment, using caches can cause exceptions
  /// like `java.util.zip.ZipException: ZipFile invalid LOC header (bad signature)`
  /// because a previously loaded JAR might change between builds. The
  /// "assembler.disableJarCache" setting should be set to true when embedding
  /// Smithy into an environment where this can occur.
  static const DISABLE_JAR_CACHE = r"""assembler.disableJarCache""";

  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "ModelAssembler__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory ModelAssembler() {
    return ModelAssembler.fromRef(_ctor().object);
  }

  static final _copy = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ModelAssembler__copy")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler copy()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a copy of the current model assembler.
  ///@return Returns the created model assembler copy.
  ModelAssembler copy() {
    return const $ModelAssemblerType().fromRef(_copy(reference).object);
  }

  static final _reset = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ModelAssembler__reset")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler reset()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Resets the state of the ModelAssembler.
  ///
  /// The following properties of the ModelAssembler are cleared when
  /// this method is called:
  ///
  /// <ul>
  ///     <li>Validators registered via \#addValidator</li>
  ///     <li>Models registered via \#addImport</li>
  ///     <li>Models registered via \#addDocumentNode</li>
  ///     <li>Models registered via \#addUnparsedModel</li>
  ///     <li>Models registered via \#addModel</li>
  ///     <li>Shape registered via \#addModel</li>
  ///     <li>Metadata registered via \#putMetadata</li>
  ///     <li>Validation is re-enabled if it was disabled.</li>
  ///     <li>Validation event listener via \#validationEventListener(Consumer)</li>
  /// </ul>
  ///
  /// The state of \#disablePrelude is reset such that the prelude
  /// is no longer disabled after calling {@code reset}.
  ///@return Returns the model assembler.
  ModelAssembler reset() {
    return const $ModelAssemblerType().fromRef(_reset(reference).object);
  }

  static final _traitFactory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__traitFactory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler traitFactory(software.amazon.smithy.model.traits.TraitFactory traitFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Uses a custom TraitFactory to resolve and configure traits.
  ///@param traitFactory Trait factory to use instead of the default.
  ///@return Returns the assembler.
  ModelAssembler traitFactory(
    jni.JObject traitFactory,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_traitFactory(reference, traitFactory.reference).object);
  }

  static final _validatorFactory = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__validatorFactory")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler validatorFactory(software.amazon.smithy.model.validation.ValidatorFactory validatorFactory)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a custom ValidatorFactory used to dynamically resolve
  /// validator definitions.
  ///
  /// Note that if you do not provide an explicit validatorFactory, a
  /// default factory is utilized that uses service discovery.
  ///@param validatorFactory Validator factory to use.
  ///@return Returns the assembler.
  ModelAssembler validatorFactory(
    jni.JObject validatorFactory,
  ) {
    return const $ModelAssemblerType().fromRef(
        _validatorFactory(reference, validatorFactory.reference).object);
  }

  static final _addValidator = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addValidator")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addValidator(software.amazon.smithy.model.validation.Validator validator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Registers a validator to be used when validating the model.
  ///@param validator Validator to register.
  ///@return Returns the assembler.
  ModelAssembler addValidator(
    jni.JObject validator,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addValidator(reference, validator.reference).object);
  }

  static final _addUnparsedModel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addUnparsedModel")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addUnparsedModel(java.lang.String sourceLocation, java.lang.String model)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a string containing an unparsed model to the assembler.
  ///
  /// The provided {@code sourceLocation} string must end with
  /// ".json" or ".smithy" to be parsed correctly.
  ///@param sourceLocation Source location to assume for the unparsed content.
  ///@param model Unparsed model source.
  ///@return Returns the assembler.
  ModelAssembler addUnparsedModel(
    jni.JString sourceLocation,
    jni.JString model,
  ) {
    return const $ModelAssemblerType().fromRef(
        _addUnparsedModel(reference, sourceLocation.reference, model.reference)
            .object);
  }

  static final _addDocumentNode = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addDocumentNode")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addDocumentNode(software.amazon.smithy.model.node.Node document)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds a parsed JSON model file as a Node to the assembler.
  ///@param document Parsed document node to add.
  ///@return Returns the assembler.
  ModelAssembler addDocumentNode(
    node_.Node document,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addDocumentNode(reference, document.reference).object);
  }

  static final _addImport = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addImport")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addImport(java.lang.String importPath)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an import to the assembler.
  ///@param importPath Import path to add.
  ///@return Returns the assembler.
  ///@see \#addImport(Path)
  ModelAssembler addImport(
    jni.JString importPath,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addImport(reference, importPath.reference).object);
  }

  static final _addImport1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addImport1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addImport(java.nio.file.Path importPath)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an import to the assembler.
  ///
  /// If a directory is found, all ".json" and ".ion" files that contain
  /// a "smithy" key-value pair found in the directory and any subdirectories
  /// are imported into the model.
  ///@param importPath Import path to add.
  ///@return Returns the assembler.
  ModelAssembler addImport1(
    jni.JObject importPath,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addImport1(reference, importPath.reference).object);
  }

  static final _addImport2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addImport2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addImport(java.net.URL url)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an import to the assembler from a URL.
  ///
  /// The provided URL can point to a .json model, .smithy model, or
  /// a .jar file that contains Smithy models.
  ///
  /// <pre>
  /// {@code
  /// Model model = Model.assembler()
  ///      .addImport(getClass().getClassLoader().getResource("model.json"))
  ///      .assemble()
  ///      .unwrap();
  /// }
  /// </pre>
  ///@param url Resource URL to load and add.
  ///@return Returns the assembler.
  ModelAssembler addImport2(
    jni.JObject url,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addImport2(reference, url.reference).object);
  }

  static final _disablePrelude = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ModelAssembler__disablePrelude")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler disablePrelude()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Disables automatically loading the prelude models.
  ///@return Returns the assembler.
  ModelAssembler disablePrelude() {
    return const $ModelAssemblerType()
        .fromRef(_disablePrelude(reference).object);
  }

  static final _addShape = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addShape")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addShape(software.amazon.smithy.model.shapes.Shape shape)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Explicitly injects a shape into the assembled model.
  ///@param shape Shape to add.
  ///@return Returns the assembler.
  ModelAssembler addShape(
    jni.JObject shape,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addShape(reference, shape.reference).object);
  }

  static final _addShapes = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addShapes")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addShapes(software.amazon.smithy.model.shapes.Shape[] shapes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Explicitly injects multiple shapes into the assembled model.
  ///@param shapes Shapes to add.
  ///@return Returns the assembler.
  ModelAssembler addShapes(
    jni.JArray<jni.JObject> shapes,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addShapes(reference, shapes.reference).object);
  }

  static final _addTrait = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addTrait")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addTrait(software.amazon.smithy.model.shapes.ShapeId target, software.amazon.smithy.model.traits.Trait trait)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Explicitly adds a trait to a shape in the assembled model.
  ///@param target Shape to add the trait to.
  ///@param trait Trait to add.
  ///@return Returns the assembler.
  ModelAssembler addTrait(
    jni.JObject target,
    jni.JObject trait,
  ) {
    return const $ModelAssemblerType().fromRef(
        _addTrait(reference, target.reference, trait.reference).object);
  }

  static final _addModel = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__addModel")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler addModel(software.amazon.smithy.model.Model model)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Merges a loaded model into the model assembler.
  ///@param model Model to merge in.
  ///@return Returns the model assembler.
  ModelAssembler addModel(
    model_.Model model,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_addModel(reference, model.reference).object);
  }

  static final _putMetadata = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__putMetadata")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler putMetadata(java.lang.String name, software.amazon.smithy.model.node.Node value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds metadata to the model.
  ///@param name Metadata key to set.
  ///@param value Metadata value to set.
  ///@return Returns the model assembler.
  ModelAssembler putMetadata(
    jni.JString name,
    node_.Node value,
  ) {
    return const $ModelAssemblerType().fromRef(
        _putMetadata(reference, name.reference, value.reference).object);
  }

  static final _discoverModels = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__discoverModels")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler discoverModels(java.lang.ClassLoader loader)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Discovers models by merging in all models returns by ModelDiscovery
  /// manifests using the provided {@code ClassLoader}.
  ///@param loader Class loader to use to discover models.
  ///@return Returns the model assembler.
  ModelAssembler discoverModels(
    jni.JObject loader,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_discoverModels(reference, loader.reference).object);
  }

  static final _discoverModels1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ModelAssembler__discoverModels1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler discoverModels()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Discovers models by merging in all models returns by ModelDiscovery
  /// manifests using the thread context {@code ClassLoader}.
  ///@return Returns the model assembler.
  ModelAssembler discoverModels1() {
    return const $ModelAssemblerType()
        .fromRef(_discoverModels1(reference).object);
  }

  static final _putProperty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__putProperty")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler putProperty(java.lang.String setting, java.lang.Object value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Puts a configuration property on the ModelAssembler.
  ///
  /// Any number of properties can be given to the model assembler to
  /// affect how models are loaded. Some properties like \#ALLOW_UNKNOWN_TRAITS
  /// are built-in properties, while other properties can be custom
  /// properties that are specific to certain ModelLoader
  /// implementations.
  ///
  /// The following example configures the ModelAssembler to emit warnings
  /// for unknown traits rather than fail:
  ///
  /// <pre>{@code
  /// ModelAssembler assembler = Model.assembler();
  /// assembler.putProperty(ModelAssembler.ALLOW_UNKNOWN_TRAITS, true);
  /// }</pre>
  ///@param setting Name of the property to put.
  ///@param value Value to set for the property.
  ///@return Returns the assembler.
  ModelAssembler putProperty(
    jni.JString setting,
    jni.JObject value,
  ) {
    return const $ModelAssemblerType().fromRef(
        _putProperty(reference, setting.reference, value.reference).object);
  }

  static final _removeProperty = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ModelAssembler__removeProperty")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler removeProperty(java.lang.String setting)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes a setting from the ModelAssembler.
  ///@param setting Setting to remove.
  ///@return Returns the assembler.
  ModelAssembler removeProperty(
    jni.JString setting,
  ) {
    return const $ModelAssemblerType()
        .fromRef(_removeProperty(reference, setting.reference).object);
  }

  static final _disableValidation = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ModelAssembler__disableValidation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler disableValidation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Disables additional validation of the model.
  ///@return Returns the assembler.
  ModelAssembler disableValidation() {
    return const $ModelAssemblerType()
        .fromRef(_disableValidation(reference).object);
  }

  static final _validationEventListener = jniLookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>(
          "ModelAssembler__validationEventListener")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.loader.ModelAssembler validationEventListener(java.util.function.Consumer<software.amazon.smithy.model.validation.ValidationEvent> eventListener)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets a listener that is invoked each time a ValidationEvent is encountered
  /// while loading and validating the model.
  ///
  /// The consumer could be invoked simultaneously by multiple threads. It's
  /// up to the consumer to perform any necessary synchronization. Providing
  /// an event listener is useful for things like CLIs so that events can
  /// be streamed to stdout as soon as they are encountered, rather than
  /// waiting until the entire model is parsed and validated.
  ///@param eventListener Listener invoked for each ValidationEvent.
  ///@return Returns the assembler.
  ModelAssembler validationEventListener(
    jni.JObject eventListener,
  ) {
    return const $ModelAssemblerType().fromRef(
        _validationEventListener(reference, eventListener.reference).object);
  }

  static final _assemble = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ModelAssembler__assemble")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.validation.ValidatedResult<software.amazon.smithy.model.Model> assemble()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Assembles the model and returns the validated result.
  ///@return Returns the validated result that optionally contains a Model
  ///  and validation events.
  validatedresult_.ValidatedResult<model_.Model> assemble() {
    return const validatedresult_.$ValidatedResultType(model_.$ModelType())
        .fromRef(_assemble(reference).object);
  }
}

class $ModelAssemblerType extends jni.JObjType<ModelAssembler> {
  const $ModelAssemblerType();

  @override
  String get signature =>
      r"Lsoftware/amazon/smithy/model/loader/ModelAssembler;";

  @override
  ModelAssembler fromRef(jni.JObjectPtr ref) => ModelAssembler.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ModelAssemblerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ModelAssemblerType) &&
        other is $ModelAssemblerType;
  }
}
