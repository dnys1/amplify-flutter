// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../_init.dart";

/// from: software.amazon.smithy.model.node.Node
///
/// Base class of for all Smithy model nodes.
///
/// When loading a Smithy model the data is loaded from the source model
/// file into a tree of nodes. These nodes represent the unvalidated
/// structure of the model document.
class Node extends jni.JObject {
  @override
  late final jni.JObjType<Node> $type = type;

  Node.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $NodeType();
  static final _parse = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__parse")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node parse(java.lang.String json)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to parse the given JSON string and return a Node.
  ///@param json JSON text to parse.
  ///@return Returns the parsed Node on success.
  ///@throws ModelSyntaxException if the JSON text is invalid.
  static Node parse(
    jni.JString json,
  ) {
    return const $NodeType().fromRef(_parse(json.reference).object);
  }

  static final _parse1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__parse1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node parse(java.lang.String json, java.lang.String file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to parse the given JSON string and File Name and return a Node.
  ///@param json JSON text to parse.
  ///@param file Filename corresponding to json text
  ///@return Returns the parsed Node on success.
  ///@throws ModelSyntaxException if the JSON text is invalid.
  static Node parse1(
    jni.JString json,
    jni.JString file,
  ) {
    return const $NodeType()
        .fromRef(_parse1(json.reference, file.reference).object);
  }

  static final _parse2 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__parse2")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node parse(java.io.InputStream json)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to parse the given JSON input stream and returns a Node.
  ///@param json JSON input stream to parse. The input stream is closed
  ///   automatically when the content is fully parsed.
  ///@return Returns the parsed Node on success.
  ///@throws ModelSyntaxException if the JSON text is invalid.
  static Node parse2(
    jni.JObject json,
  ) {
    return const $NodeType().fromRef(_parse2(json.reference).object);
  }

  static final _parse3 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__parse3")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node parse(java.io.InputStream json, java.lang.String file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to parse the given JSON input stream and returns a Node.
  ///@param json JSON input stream to parse. The input stream is closed
  ///   automatically when the content is fully parsed.
  ///@param file Filename corresponding to json text
  ///@return Returns the parsed Node on success.
  ///@throws ModelSyntaxException if the JSON text is invalid.
  static Node parse3(
    jni.JObject json,
    jni.JString file,
  ) {
    return const $NodeType()
        .fromRef(_parse3(json.reference, file.reference).object);
  }

  static final _parseJsonWithComments = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__parseJsonWithComments")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node parseJsonWithComments(java.lang.String json, java.lang.String file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to parse the given JSON string and File Name and return a Node.
  ///
  /// This parser allows for comments in the JSON.
  ///@param json JSON text to parse.
  ///@param file Filename corresponding to json text
  ///@return Returns the parsed Node on success.
  ///@throws ModelSyntaxException if the JSON text is invalid.
  static Node parseJsonWithComments(
    jni.JString json,
    jni.JString file,
  ) {
    return const $NodeType()
        .fromRef(_parseJsonWithComments(json.reference, file.reference).object);
  }

  static final _parseJsonWithComments1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__parseJsonWithComments1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node parseJsonWithComments(java.lang.String json)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Attempts to parse the given JSON string and return a Node.
  ///
  /// This parser allows for comments in the JSON.
  ///@param json JSON text to parse.
  ///@return Returns the parsed Node on success.
  ///@throws ModelSyntaxException if the JSON text is invalid.
  static Node parseJsonWithComments1(
    jni.JString json,
  ) {
    return const $NodeType()
        .fromRef(_parseJsonWithComments1(json.reference).object);
  }

  static final _prettyPrintJson = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__prettyPrintJson")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String prettyPrintJson(software.amazon.smithy.model.node.Node node)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Writes the contents of a Node to a pretty-printed JSON string.
  ///@param node Node to write.
  ///@return Returns the serialized Node.
  static jni.JString prettyPrintJson(
    Node node,
  ) {
    return const jni.JStringType()
        .fromRef(_prettyPrintJson(node.reference).object);
  }

  static final _prettyPrintJson1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__prettyPrintJson1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String prettyPrintJson(software.amazon.smithy.model.node.Node node, java.lang.String indentString)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Writes the contents of a Node to a pretty-printed JSON string.
  ///@param node Node to write.
  ///@param indentString String to use for indention.
  ///@return Returns the serialized Node.
  static jni.JString prettyPrintJson1(
    Node node,
    jni.JString indentString,
  ) {
    return const jni.JStringType().fromRef(
        _prettyPrintJson1(node.reference, indentString.reference).object);
  }

  static final _printJson = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__printJson")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String printJson(software.amazon.smithy.model.node.Node node)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Writes the contents of a Node to a non-pretty-printed JSON string.
  ///@param node Node to write.
  ///@return Returns the serialized Node.
  static jni.JString printJson(
    Node node,
  ) {
    return const jni.JStringType().fromRef(_printJson(node.reference).object);
  }

  static final _from = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__from")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.StringNode from(java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a StringNode from a String value.
  ///@param value Value to create a node from.
  ///@return Returns the created StringNode.
  static jni.JObject from(
    jni.JString value,
  ) {
    return const jni.JObjectType().fromRef(_from(value.reference).object);
  }

  static final _from1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__from1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.NumberNode from(java.lang.Number number)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a NumberNode from a Number value.
  ///@param number Value to create a node from.
  ///@return Returns the created NumberNode.
  static jni.JObject from1(
    jni.JNumber number,
  ) {
    return const jni.JObjectType().fromRef(_from1(number.reference).object);
  }

  static final _from2 =
      jniLookup<ffi.NativeFunction<jni.JniResult Function(ffi.Uint8)>>(
              "Node__from2")
          .asFunction<jni.JniResult Function(int)>();

  /// from: static public software.amazon.smithy.model.node.BooleanNode from(boolean value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a BooleanNode from a boolean value.
  ///@param value Value to create a node from.
  ///@return Returns the created BooleanNode.
  static jni.JObject from2(
    bool value,
  ) {
    return const jni.JObjectType().fromRef(_from2(value ? 1 : 0).object);
  }

  static final _from3 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__from3")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node from(software.amazon.smithy.model.node.ToNode value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Create a Node from a potentially null ToNode value.
  ///@param value Value to create a node from.
  ///@return Returns the created Node.
  static Node from3(
    jni.JObject value,
  ) {
    return const $NodeType().fromRef(_from3(value.reference).object);
  }

  static final _fromNodes = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__fromNodes")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.ArrayNode fromNodes(java.util.List<? extends software.amazon.smithy.model.node.Node> values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an ArrayNode from a Collection of Node values.
  ///@param values String values to add to the ArrayNode.
  ///@return Returns the created ArrayNode.
  static jni.JObject fromNodes(
    jni.JList<jni.JObject> values,
  ) {
    return const jni.JObjectType().fromRef(_fromNodes(values.reference).object);
  }

  static final _fromNodes1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__fromNodes1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.ArrayNode fromNodes(software.amazon.smithy.model.node.Node[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an ArrayNode from a variadic list of Node values.
  ///@param values String values to add to the ArrayNode.
  ///@return Returns the created ArrayNode.
  static jni.JObject fromNodes1(
    jni.JArray<Node> values,
  ) {
    return const jni.JObjectType()
        .fromRef(_fromNodes1(values.reference).object);
  }

  static final _fromStrings = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__fromStrings")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.ArrayNode fromStrings(java.util.Collection<java.lang.String> values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an ArrayNode from a Collection of String values.
  ///@param values String values to add to the ArrayNode.
  ///@return Returns the created ArrayNode.
  static jni.JObject fromStrings(
    jni.JObject values,
  ) {
    return const jni.JObjectType()
        .fromRef(_fromStrings(values.reference).object);
  }

  static final _fromStrings1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__fromStrings1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.ArrayNode fromStrings(java.lang.String[] values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an ArrayNode from a variadic list of String values.
  ///@param values String values to add to the ArrayNode.
  ///@return Returns the created ArrayNode.
  static jni.JObject fromStrings1(
    jni.JArray<jni.JString> values,
  ) {
    return const jni.JObjectType()
        .fromRef(_fromStrings1(values.reference).object);
  }

  static final _objectNodeBuilder =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Node__objectNodeBuilder")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.node.ObjectNode.Builder objectNodeBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an ObjectNode.Builder.
  ///@return Returns the ObjectNode builder.
  static jni.JObject objectNodeBuilder() {
    return const jni.JObjectType().fromRef(_objectNodeBuilder().object);
  }

  static final _objectNode =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Node__objectNode")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.node.ObjectNode objectNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an empty ObjectNode.
  ///@return Returns the ObjectNode.
  static jni.JObject objectNode() {
    return const jni.JObjectType().fromRef(_objectNode().object);
  }

  static final _objectNode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__objectNode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.ObjectNode objectNode(java.util.Map<software.amazon.smithy.model.node.StringNode,software.amazon.smithy.model.node.Node> values)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an ObjectNode from the given map of Nodes.
  ///@param values Values to add to the object node.
  ///@return Returns the created ObjectNode.
  static jni.JObject objectNode1(
    jni.JMap<jni.JObject, Node> values,
  ) {
    return const jni.JObjectType()
        .fromRef(_objectNode1(values.reference).object);
  }

  static final _arrayNode =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Node__arrayNode")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.node.ArrayNode arrayNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an empty ArrayNode.
  ///@return Returns the ArrayNode.
  static jni.JObject arrayNode() {
    return const jni.JObjectType().fromRef(_arrayNode().object);
  }

  static final _arrayNode1 = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__arrayNode1")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.ArrayNode arrayNode(software.amazon.smithy.model.node.Node[] nodes)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an ArrayNode from a variadic list of Nodes.
  ///@param nodes Nodes to add to the array.
  ///@return Returns the created ArrayNode.
  static jni.JObject arrayNode1(
    jni.JArray<Node> nodes,
  ) {
    return const jni.JObjectType().fromRef(_arrayNode1(nodes.reference).object);
  }

  static final _nullNode =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>("Node__nullNode")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.node.NullNode nullNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a NullNode.
  ///@return Returns the NullNode.
  static jni.JObject nullNode() {
    return const jni.JObjectType().fromRef(_nullNode().object);
  }

  static final _loadArrayOfString = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__loadArrayOfString")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List<java.lang.String> loadArrayOfString(java.lang.String descriptor, software.amazon.smithy.model.node.Node node)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Expects an array of strings and returns the loaded strings.
  ///@param descriptor Name of the property being loaded.
  ///@param node Node to load.
  ///@return Returns the loaded strings.
  ///@throws SourceException on error.
  static jni.JList<jni.JString> loadArrayOfString(
    jni.JString descriptor,
    Node node,
  ) {
    return const jni.JListType(jni.JStringType()).fromRef(
        _loadArrayOfString(descriptor.reference, node.reference).object);
  }

  static final _assertEquals = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__assertEquals")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public void assertEquals(software.amazon.smithy.model.node.ToNode actual, software.amazon.smithy.model.node.ToNode expected)
  ///
  /// Testing helper used to compare two Nodes for equivalence.
  ///
  /// Compares two Node values and throws if they aren't equal. The
  /// thrown exception contains a message that shows the differences
  /// between the two Nodes as returned by \#diff(ToNode, ToNode).
  ///@param actual Node to use as the starting node.
  ///@param expected Node to compare against.
  ///@throws ExpectationNotMetException if the nodes are not equivalent.
  static void assertEquals(
    jni.JObject actual,
    jni.JObject expected,
  ) {
    return _assertEquals(actual.reference, expected.reference).check();
  }

  static final _diff = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>("Node__diff")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.List<java.lang.String> diff(software.amazon.smithy.model.node.ToNode actual, software.amazon.smithy.model.node.ToNode expected)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Computes the differences between two Nodes as a String.
  ///@param actual Node to use as the starting node.
  ///@param expected Node to compare against.
  ///@return Returns the differences as a String.
  static jni.JList<jni.JString> diff(
    jni.JObject actual,
    jni.JObject expected,
  ) {
    return const jni.JListType(jni.JStringType())
        .fromRef(_diff(actual.reference, expected.reference).object);
  }

  static final _getType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__getType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public abstract software.amazon.smithy.model.node.NodeType getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the type of the node.
  ///@return Returns the node type.
  jni.JObject getType() {
    return const jni.JObjectType().fromRef(_getType(reference).object);
  }

  static final _accept = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__accept")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract R accept(software.amazon.smithy.model.node.NodeVisitor<R> visitor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Accepts a visitor with the node.
  ///@param visitor Visitor to dispatch to.
  ///@param <R> visitor return type.
  ///@return Returns the accepted result.
  $R accept<$R extends jni.JObject>(
    jni.JObject visitor, {
    required jni.JObjType<$R> R,
  }) {
    return R.fromRef(_accept(reference, visitor.reference).object);
  }

  static final _isObjectNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__isObjectNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isObjectNode()
  ///
  /// Checks if this node is an object type.
  ///@return Returns true if this node is an object type.
  bool isObjectNode() {
    return _isObjectNode(reference).boolean;
  }

  static final _isArrayNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__isArrayNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isArrayNode()
  ///
  /// Checks if this node is an array type.
  ///@return Returns true if this node is an array type.
  bool isArrayNode() {
    return _isArrayNode(reference).boolean;
  }

  static final _isStringNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__isStringNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isStringNode()
  ///
  /// Checks if this node is a string type.
  ///@return Returns true if this node is a string type.
  bool isStringNode() {
    return _isStringNode(reference).boolean;
  }

  static final _isNumberNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__isNumberNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isNumberNode()
  ///
  /// Checks if this node is a number type.
  ///@return Returns true if this node is a number type.
  bool isNumberNode() {
    return _isNumberNode(reference).boolean;
  }

  static final _isBooleanNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__isBooleanNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isBooleanNode()
  ///
  /// Checks if this node is a boolean type.
  ///@return Returns true if this node is a boolean type.
  bool isBooleanNode() {
    return _isBooleanNode(reference).boolean;
  }

  static final _isNullNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__isNullNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isNullNode()
  ///
  /// Checks if this node is a null type.
  ///@return Returns true if this node is a null type.
  bool isNullNode() {
    return _isNullNode(reference).boolean;
  }

  static final _asObjectNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__asObjectNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.node.ObjectNode> asObjectNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the node as an ObjectNode if it is an object.
  ///@return Returns the optional object node.
  jni.JObject asObjectNode() {
    return const jni.JObjectType().fromRef(_asObjectNode(reference).object);
  }

  static final _asArrayNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__asArrayNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.node.ArrayNode> asArrayNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the node as an ArrayNode if it is an array.
  ///@return Returns the optional array node.
  jni.JObject asArrayNode() {
    return const jni.JObjectType().fromRef(_asArrayNode(reference).object);
  }

  static final _asStringNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__asStringNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.node.StringNode> asStringNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the node as an StringNode if it is an string.
  ///@return Returns the optional StringNode.
  jni.JObject asStringNode() {
    return const jni.JObjectType().fromRef(_asStringNode(reference).object);
  }

  static final _asBooleanNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__asBooleanNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.node.BooleanNode> asBooleanNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the node as an BooleanNode if it is an boolean.
  ///@return Returns the optional BooleanNode.
  jni.JObject asBooleanNode() {
    return const jni.JObjectType().fromRef(_asBooleanNode(reference).object);
  }

  static final _asNumberNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__asNumberNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.node.NumberNode> asNumberNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the node as an NumberNode if it is an number.
  ///@return Returns the optional NumberNode.
  jni.JObject asNumberNode() {
    return const jni.JObjectType().fromRef(_asNumberNode(reference).object);
  }

  static final _asNullNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__asNullNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.node.NullNode> asNullNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the node as an NullNode if it is a null.
  ///@return Returns the optional NullNode.
  jni.JObject asNullNode() {
    return const jni.JObjectType().fromRef(_asNullNode(reference).object);
  }

  static final _expectObjectNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__expectObjectNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.ObjectNode expectObjectNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to an {@code ObjectNode}.
  ///@return Returns an object node.
  ///@throws ExpectationNotMetException when the node is not an {@code ObjectNode}.
  jni.JObject expectObjectNode() {
    return const jni.JObjectType().fromRef(_expectObjectNode(reference).object);
  }

  static final _expectObjectNode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectObjectNode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.ObjectNode expectObjectNode(java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to an {@code ObjectNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message to use if the node is of the wrong type.
  ///@return Returns an object node.
  ///@throws ExpectationNotMetException when the node is not an {@code ObjectNode}.
  jni.JObject expectObjectNode1(
    jni.JString message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectObjectNode1(reference, message.reference).object);
  }

  static final _expectObjectNode2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectObjectNode2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.ObjectNode expectObjectNode(java.util.function.Supplier<java.lang.String> message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to an {@code ObjectNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message supplier.
  ///@return Returns an object node.
  ///@throws ExpectationNotMetException when the node is not an {@code ObjectNode}.
  jni.JObject expectObjectNode2(
    jni.JObject message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectObjectNode2(reference, message.reference).object);
  }

  static final _expectArrayNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__expectArrayNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.ArrayNode expectArrayNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to an {@code ArrayNode}.
  ///@return Returns an array node.
  ///@throws ExpectationNotMetException when the node is not an {@code ArrayNode}.
  jni.JObject expectArrayNode() {
    return const jni.JObjectType().fromRef(_expectArrayNode(reference).object);
  }

  static final _expectArrayNode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectArrayNode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.ArrayNode expectArrayNode(java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to an {@code ArrayNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message to use if the node is of the wrong type.
  ///@return Returns an array node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectArrayNode1(
    jni.JString message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectArrayNode1(reference, message.reference).object);
  }

  static final _expectArrayNode2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectArrayNode2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.ArrayNode expectArrayNode(java.util.function.Supplier<java.lang.String> message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to an {@code ArrayNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message supplier.
  ///@return Returns an array node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectArrayNode2(
    jni.JObject message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectArrayNode2(reference, message.reference).object);
  }

  static final _expectStringNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__expectStringNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.StringNode expectStringNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code StringNode}.
  ///@return Returns a string node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectStringNode() {
    return const jni.JObjectType().fromRef(_expectStringNode(reference).object);
  }

  static final _expectStringNode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectStringNode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.StringNode expectStringNode(java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code StringNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message to use if the node is of the wrong type.
  ///@return Returns a string node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectStringNode1(
    jni.JString message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectStringNode1(reference, message.reference).object);
  }

  static final _expectStringNode2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectStringNode2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.StringNode expectStringNode(java.util.function.Supplier<java.lang.String> message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code StringNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message supplier.
  ///@return Returns a string node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectStringNode2(
    jni.JObject message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectStringNode2(reference, message.reference).object);
  }

  static final _expectNumberNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__expectNumberNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.NumberNode expectNumberNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code NumberNode}.
  ///@return Returns a number node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectNumberNode() {
    return const jni.JObjectType().fromRef(_expectNumberNode(reference).object);
  }

  static final _expectNumberNode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectNumberNode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.NumberNode expectNumberNode(java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code NumberNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message to use if the node is of the wrong type.
  ///@return Returns a number node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectNumberNode1(
    jni.JString message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectNumberNode1(reference, message.reference).object);
  }

  static final _expectNumberNode2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectNumberNode2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.NumberNode expectNumberNode(java.util.function.Supplier<java.lang.String> message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code NumberNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message supplier.
  ///@return Returns a number node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectNumberNode2(
    jni.JObject message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectNumberNode2(reference, message.reference).object);
  }

  static final _expectBooleanNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__expectBooleanNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.BooleanNode expectBooleanNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code BooleanNode}.
  ///@return Returns a boolean node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectBooleanNode() {
    return const jni.JObjectType()
        .fromRef(_expectBooleanNode(reference).object);
  }

  static final _expectBooleanNode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectBooleanNode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.BooleanNode expectBooleanNode(java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code BooleanNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message to use if the node is of the wrong type.
  ///@return Returns a boolean node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectBooleanNode1(
    jni.JString message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectBooleanNode1(reference, message.reference).object);
  }

  static final _expectBooleanNode2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectBooleanNode2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.BooleanNode expectBooleanNode(java.util.function.Supplier<java.lang.String> message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code BooleanNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message supplier.
  ///@return Returns a boolean node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectBooleanNode2(
    jni.JObject message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectBooleanNode2(reference, message.reference).object);
  }

  static final _expectNullNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__expectNullNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.NullNode expectNullNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code NullNode}.
  ///@return Returns a null node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectNullNode() {
    return const jni.JObjectType().fromRef(_expectNullNode(reference).object);
  }

  static final _expectNullNode1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectNullNode1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.NullNode expectNullNode(java.lang.String message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code NullNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message to use if the node is of the wrong type.
  ///@return Returns a null node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectNullNode1(
    jni.JString message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectNullNode1(reference, message.reference).object);
  }

  static final _expectNullNode2 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__expectNullNode2")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.node.NullNode expectNullNode(java.util.function.Supplier<java.lang.String> message)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Casts the current node to a {@code NullNode}, throwing
  /// ExpectationNotMetException when the node is the wrong type.
  ///@param message Error message supplier.
  ///@return Returns a null node.
  ///@throws ExpectationNotMetException when the node is the wrong type.
  jni.JObject expectNullNode2(
    jni.JObject message,
  ) {
    return const jni.JObjectType()
        .fromRef(_expectNullNode2(reference, message.reference).object);
  }

  static final _getSourceLocation = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__getSourceLocation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.SourceLocation getSourceLocation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getSourceLocation() {
    return const jni.JObjectType()
        .fromRef(_getSourceLocation(reference).object);
  }

  static final _toNode = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__toNode")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.Node toNode()
  /// The returned object must be deleted after use, by calling the `delete` method.
  Node toNode() {
    return const $NodeType().fromRef(_toNode(reference).object);
  }

  static final _withDeepSortedKeys = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node__withDeepSortedKeys")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.Node withDeepSortedKeys()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a node with sorted keys and sorted keys of all nested object
  /// nodes.
  ///@return Returns the node in which all object nodes have sorted keys.
  Node withDeepSortedKeys() {
    return const $NodeType().fromRef(_withDeepSortedKeys(reference).object);
  }

  static final _withDeepSortedKeys1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("Node__withDeepSortedKeys1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final software.amazon.smithy.model.node.Node withDeepSortedKeys(java.util.Comparator<software.amazon.smithy.model.node.StringNode> keyComparator)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a node with sorted keys and sorted keys of all nested object
  /// nodes using a custom comparator.
  ///@param keyComparator Compares keys.
  ///@return Returns the node in which all object nodes have sorted keys.
  Node withDeepSortedKeys1(
    jni.JObject keyComparator,
  ) {
    return const $NodeType().fromRef(
        _withDeepSortedKeys1(reference, keyComparator.reference).object);
  }
}

class $NodeType extends jni.JObjType<Node> {
  const $NodeType();

  @override
  String get signature => r"Lsoftware/amazon/smithy/model/node/Node;";

  @override
  Node fromRef(jni.JObjectPtr ref) => Node.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($NodeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($NodeType) && other is $NodeType;
  }
}

/// from: software.amazon.smithy.model.node.Node$NonNumericFloat
///
/// Non-numeric values for floats and doubles.
class Node_NonNumericFloat extends jni.JObject {
  @override
  late final jni.JObjType<Node_NonNumericFloat> $type = type;

  Node_NonNumericFloat.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $Node_NonNumericFloatType();
  static final _values =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Node_NonNumericFloat__values")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.node.Node.NonNumericFloat[] values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static jni.JArray<Node_NonNumericFloat> values() {
    return const jni.JArrayType($Node_NonNumericFloatType())
        .fromRef(_values().object);
  }

  static final _valueOf = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node_NonNumericFloat__valueOf")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public software.amazon.smithy.model.node.Node.NonNumericFloat valueOf(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static Node_NonNumericFloat valueOf(
    jni.JString name,
  ) {
    return const $Node_NonNumericFloatType()
        .fromRef(_valueOf(name.reference).object);
  }

  static final _getStringRepresentation = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node_NonNumericFloat__getStringRepresentation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getStringRepresentation()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The string representation of this non-numeric float.
  jni.JString getStringRepresentation() {
    return const jni.JStringType()
        .fromRef(_getStringRepresentation(reference).object);
  }

  static final _stringRepresentations =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "Node_NonNumericFloat__stringRepresentations")
          .asFunction<jni.JniResult Function()>();

  /// from: static public java.util.Set<java.lang.String> stringRepresentations()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return All the possible string representations of non-numeric floats.
  static jni.JSet<jni.JString> stringRepresentations() {
    return const jni.JSetType(jni.JStringType())
        .fromRef(_stringRepresentations().object);
  }

  static final _fromStringRepresentation = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "Node_NonNumericFloat__fromStringRepresentation")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: static public java.util.Optional<software.amazon.smithy.model.node.Node.NonNumericFloat> fromStringRepresentation(java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Convert a string value into a NonNumericFloat.
  ///@param value A string representation of a non-numeric float value.
  ///@return A NonNumericFloat that represents the given string value or empty if there is no associated value.
  static jni.JObject fromStringRepresentation(
    jni.JString value,
  ) {
    return const jni.JObjectType()
        .fromRef(_fromStringRepresentation(value.reference).object);
  }
}

class $Node_NonNumericFloatType extends jni.JObjType<Node_NonNumericFloat> {
  const $Node_NonNumericFloatType();

  @override
  String get signature =>
      r"Lsoftware/amazon/smithy/model/node/Node$NonNumericFloat;";

  @override
  Node_NonNumericFloat fromRef(jni.JObjectPtr ref) =>
      Node_NonNumericFloat.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Node_NonNumericFloatType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Node_NonNumericFloatType) &&
        other is $Node_NonNumericFloatType;
  }
}
