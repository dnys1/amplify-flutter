// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../../_init.dart";

/// from: software.amazon.smithy.model.shapes.ServiceShape
///
/// Represents a {@code service} shape.
class ServiceShape extends jni.JObject {
  @override
  late final jni.JObjType<ServiceShape> $type = type;

  ServiceShape.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ServiceShapeType();
  static final _builder =
      jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
              "ServiceShape__builder")
          .asFunction<jni.JniResult Function()>();

  /// from: static public software.amazon.smithy.model.shapes.ServiceShape.Builder builder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  static ServiceShape_Builder builder() {
    return const $ServiceShape_BuilderType().fromRef(_builder().object);
  }

  static final _toBuilder = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__toBuilder")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder toBuilder()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape_Builder toBuilder() {
    return const $ServiceShape_BuilderType()
        .fromRef(_toBuilder(reference).object);
  }

  static final _accept = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape__accept")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public R accept(software.amazon.smithy.model.shapes.ShapeVisitor<R> visitor)
  /// The returned object must be deleted after use, by calling the `delete` method.
  $R accept<$R extends jni.JObject>(
    jni.JObject visitor, {
    required jni.JObjType<$R> R,
  }) {
    return R.fromRef(_accept(reference, visitor.reference).object);
  }

  static final _asServiceShape = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__asServiceShape")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Optional<software.amazon.smithy.model.shapes.ServiceShape> asServiceShape()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject asServiceShape() {
    return const jni.JObjectType().fromRef(_asServiceShape(reference).object);
  }

  static final _equals1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape__equals1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object other)
  bool equals1(
    jni.JObject other,
  ) {
    return _equals1(reference, other.reference).boolean;
  }

  static final _getType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__getType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ShapeType getType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getType() {
    return const jni.JObjectType().fromRef(_getType(reference).object);
  }

  static final _getVersion = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__getVersion")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getVersion()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Get the version of the service. An empty string is returned
  /// if the version is undefined.
  ///@return The version of the service.
  jni.JString getVersion() {
    return const jni.JStringType().fromRef(_getVersion(reference).object);
  }

  static final _getIntroducedVersion = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__getIntroducedVersion")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getIntroducedVersion()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the version of the service introduced by the shape and not
  /// inherited from mixins. An empty string is returned if the version
  /// is undefined.
  ///@return The introduced version of the service.
  jni.JString getIntroducedVersion() {
    return const jni.JStringType()
        .fromRef(_getIntroducedVersion(reference).object);
  }

  static final _getRename = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__getRename")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Map<software.amazon.smithy.model.shapes.ShapeId,java.lang.String> getRename()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// @return The rename map of the service.
  jni.JMap<jni.JObject, jni.JString> getRename() {
    return const jni.JMapType(jni.JObjectType(), jni.JStringType())
        .fromRef(_getRename(reference).object);
  }

  static final _getIntroducedRename = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__getIntroducedRename")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.Map<software.amazon.smithy.model.shapes.ShapeId,java.lang.String> getIntroducedRename()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the rename map introduced by the shape and not inherited
  /// from mixins.
  ///@return The introduced rename map of the service.
  jni.JMap<jni.JObject, jni.JString> getIntroducedRename() {
    return const jni.JMapType(jni.JObjectType(), jni.JStringType())
        .fromRef(_getIntroducedRename(reference).object);
  }

  static final _getErrors = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__getErrors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<software.amazon.smithy.model.shapes.ShapeId> getErrors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets a list of the common errors that can be encountered by
  /// every operation in the service.
  ///
  ///
  /// Each returned ShapeId must resolve to a
  /// StructureShape that is targeted by an error trait; however,
  /// this is only guaranteed after a model is validated.
  ///
  ///@return Returns the errors.
  jni.JList<jni.JObject> getErrors() {
    return const jni.JListType(jni.JObjectType())
        .fromRef(_getErrors(reference).object);
  }

  static final _getIntroducedErrors = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape__getIntroducedErrors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.List<software.amazon.smithy.model.shapes.ShapeId> getIntroducedErrors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the list of common errors introduced by the shape and not
  /// inherited from mixins. These errors can be encountered by every
  /// operation in the service.
  ///
  /// Each returned ShapeId must resolve to a
  /// StructureShape that is targeted by an error trait; however,
  /// this is only guaranteed after a model is validated.
  ///@return Returns the introduced service errors.
  jni.JList<jni.JObject> getIntroducedErrors() {
    return const jni.JListType(jni.JObjectType())
        .fromRef(_getIntroducedErrors(reference).object);
  }

  static final _getContextualName = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape__getContextualName")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getContextualName(software.amazon.smithy.model.shapes.ToShapeId shape)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Gets the contextual name of a shape within the closure.
  ///
  /// If there is a rename property entry for the given shape ID, then
  /// the renamed shape name is returned. Otherwise, the name part of the
  /// given shape ID is returned, regardless of if the shape exists in the
  /// closure of the service.
  ///
  /// This is a mirror of ShapeId\#getName(ServiceShape)
  /// that serves to make this functionality more discoverable.
  ///@param shape Shape to get the contextual name of.
  ///@return Returns the contextual name of the shape within the service.
  jni.JString getContextualName(
    jni.JObject shape,
  ) {
    return const jni.JStringType()
        .fromRef(_getContextualName(reference, shape.reference).object);
  }
}

class $ServiceShapeType extends jni.JObjType<ServiceShape> {
  const $ServiceShapeType();

  @override
  String get signature => r"Lsoftware/amazon/smithy/model/shapes/ServiceShape;";

  @override
  ServiceShape fromRef(jni.JObjectPtr ref) => ServiceShape.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ServiceShapeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ServiceShapeType) &&
        other is $ServiceShapeType;
  }
}

/// from: software.amazon.smithy.model.shapes.ServiceShape$Builder
///
/// Builder used to create a ServiceShape.
class ServiceShape_Builder extends jni.JObject {
  @override
  late final jni.JObjType<ServiceShape_Builder> $type = type;

  ServiceShape_Builder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  /// The type which includes information such as the signature of this class.
  static const type = $ServiceShape_BuilderType();
  static final _ctor = jniLookup<ffi.NativeFunction<jni.JniResult Function()>>(
          "ServiceShape_Builder__ctor")
      .asFunction<jni.JniResult Function()>();

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory ServiceShape_Builder() {
    return ServiceShape_Builder.fromRef(_ctor().object);
  }

  static final _build = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape_Builder__build")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape build()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape build() {
    return const $ServiceShapeType().fromRef(_build(reference).object);
  }

  static final _getShapeType = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape_Builder__getShapeType")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ShapeType getShapeType()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject getShapeType() {
    return const jni.JObjectType().fromRef(_getShapeType(reference).object);
  }

  static final _version = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__version")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder version(java.lang.String version)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape_Builder version(
    jni.JString version,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_version(reference, version.reference).object);
  }

  static final _clearRename = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape_Builder__clearRename")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder clearRename()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape_Builder clearRename() {
    return const $ServiceShape_BuilderType()
        .fromRef(_clearRename(reference).object);
  }

  static final _rename = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__rename")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder rename(java.util.Map<software.amazon.smithy.model.shapes.ShapeId,java.lang.String> rename)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape_Builder rename(
    jni.JMap<jni.JObject, jni.JString> rename,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_rename(reference, rename.reference).object);
  }

  static final _putRename = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__putRename")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder putRename(software.amazon.smithy.model.shapes.ShapeId from, java.lang.String to)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape_Builder putRename(
    jni.JObject from,
    jni.JString to,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_putRename(reference, from.reference, to.reference).object);
  }

  static final _removeRename = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__removeRename")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder removeRename(software.amazon.smithy.model.shapes.ToShapeId from)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape_Builder removeRename(
    jni.JObject from,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_removeRename(reference, from.reference).object);
  }

  static final _errors = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__errors")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder errors(java.util.Collection<software.amazon.smithy.model.shapes.ShapeId> errorShapeIds)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Sets and replaces the errors of the service. Each error is implicitly
  /// bound to every operation within the closure of the service.
  ///@param errorShapeIds Error shape IDs to set.
  ///@return Returns the builder.
  ServiceShape_Builder errors(
    jni.JObject errorShapeIds,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_errors(reference, errorShapeIds.reference).object);
  }

  static final _addError = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__addError")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder addError(software.amazon.smithy.model.shapes.ToShapeId errorShapeId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an error to the service that is implicitly bound to every operation
  /// within the closure of the service.
  ///@param errorShapeId Error shape ID to add.
  ///@return Returns the builder.
  ServiceShape_Builder addError(
    jni.JObject errorShapeId,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_addError(reference, errorShapeId.reference).object);
  }

  static final _addError1 = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__addError1")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder addError(java.lang.String errorShapeId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds an error to the service that is implicitly bound to every
  /// operation within the closure of the service.
  ///@param errorShapeId Error shape ID to add.
  ///@return Returns the builder.
  ///@throws ShapeIdSyntaxException if the shape ID is invalid.
  ServiceShape_Builder addError1(
    jni.JString errorShapeId,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_addError1(reference, errorShapeId.reference).object);
  }

  static final _addErrors = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__addErrors")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder addErrors(java.util.List<software.amazon.smithy.model.shapes.ShapeId> errorShapeIds)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Adds errors to the service that are implicitly bound to every operation
  /// within the closure of the service.
  ///@param errorShapeIds Error shape IDs to add.
  ///@return Returns the builder.
  ServiceShape_Builder addErrors(
    jni.JList<jni.JObject> errorShapeIds,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_addErrors(reference, errorShapeIds.reference).object);
  }

  static final _removeError = jniLookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>>("ServiceShape_Builder__removeError")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder removeError(software.amazon.smithy.model.shapes.ToShapeId errorShapeId)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes an error by Shape ID.
  ///@param errorShapeId Error shape ID to remove.
  ///@return Returns the builder.
  ServiceShape_Builder removeError(
    jni.JObject errorShapeId,
  ) {
    return const $ServiceShape_BuilderType()
        .fromRef(_removeError(reference, errorShapeId.reference).object);
  }

  static final _clearErrors = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape_Builder__clearErrors")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder clearErrors()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes all errors.
  ///@return Returns the builder.
  ServiceShape_Builder clearErrors() {
    return const $ServiceShape_BuilderType()
        .fromRef(_clearErrors(reference).object);
  }

  static final _flattenMixins = jniLookup<
              ffi
              .NativeFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>>(
          "ServiceShape_Builder__flattenMixins")
      .asFunction<jni.JniResult Function(ffi.Pointer<ffi.Void>)>();

  /// from: public software.amazon.smithy.model.shapes.ServiceShape.Builder flattenMixins()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ServiceShape_Builder flattenMixins() {
    return const $ServiceShape_BuilderType()
        .fromRef(_flattenMixins(reference).object);
  }
}

class $ServiceShape_BuilderType extends jni.JObjType<ServiceShape_Builder> {
  const $ServiceShape_BuilderType();

  @override
  String get signature =>
      r"Lsoftware/amazon/smithy/model/shapes/ServiceShape$Builder;";

  @override
  ServiceShape_Builder fromRef(jni.JObjectPtr ref) =>
      ServiceShape_Builder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ServiceShape_BuilderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ServiceShape_BuilderType) &&
        other is $ServiceShape_BuilderType;
  }
}
